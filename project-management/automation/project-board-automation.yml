name: Project Board Automation

on:
  issues:
    types: [opened, closed, reopened, labeled, unlabeled]
  pull_request:
    types: [opened, closed, reopened, ready_for_review, converted_to_draft]

jobs:
  project_automation:
    runs-on: ubuntu-latest
    steps:
      - name: Add new issues to project board
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_AUTOMATION_TOKEN }}
          script: |
            const projectId = 'PVT_kwDODF_kVc4A3Lg2';  // Replace with your project ID
            
            // Add the issue to the project
            await github.graphql(`
              mutation {
                addProjectV2ItemById(input: {
                  projectId: "${projectId}",
                  contentId: "${context.payload.issue.node_id}"
                }) {
                  item {
                    id
                  }
                }
              }
            `);
            
            console.log(`Added issue #${context.payload.issue.number} to project board`);

      - name: Move issues with PRs to Review status
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_AUTOMATION_TOKEN }}
          script: |
            const projectId = 'PVT_kwDODF_kVc4A3Lg2';  // Replace with your project ID
            const statusFieldId = 'PVTF_lADODF_kVc4A3Lg2zgLuAc';  // Replace with your Status field ID
            const reviewOptionId = '47fc9ee4';  // Replace with your "Review" option ID
            
            // Get the linked issues from the PR body
            const issueNumbers = [];
            const body = context.payload.pull_request.body || '';
            const matches = body.match(/(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi);
            
            if (matches) {
              matches.forEach(match => {
                const num = match.match(/#(\d+)/)[1];
                issueNumbers.push(parseInt(num, 10));
              });
            }
            
            // For each linked issue, update its status
            for (const issueNumber of issueNumbers) {
              try {
                // Get the issue node ID
                const issueData = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                // Get the project item ID for this issue
                const projectItems = await github.graphql(`
                  query {
                    issue(owner: "${context.repo.owner}", name: "${context.repo.repo}", number: ${issueNumber}) {
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                          }
                        }
                      }
                    }
                  }
                `);
                
                const projectItem = projectItems.issue.projectItems.nodes.find(
                  item => item.project.id === projectId
                );
                
                if (projectItem) {
                  // Update the status to "Review"
                  await github.graphql(`
                    mutation {
                      updateProjectV2ItemFieldValue(
                        input: {
                          projectId: "${projectId}",
                          itemId: "${projectItem.id}",
                          fieldId: "${statusFieldId}",
                          value: { 
                            singleSelectOptionId: "${reviewOptionId}"
                          }
                        }
                      ) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `);
                  
                  console.log(`Updated issue #${issueNumber} status to Review`);
                }
              } catch (error) {
                console.error(`Error updating issue #${issueNumber}: ${error}`);
              }
            }

      - name: Move issues to Done when PR is merged
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_AUTOMATION_TOKEN }}
          script: |
            const projectId = 'PVT_kwDODF_kVc4A3Lg2';  // Replace with your project ID
            const statusFieldId = 'PVTF_lADODF_kVc4A3Lg2zgLuAc';  // Replace with your Status field ID
            const doneOptionId = '47fc9ee5';  // Replace with your "Done" option ID
            
            // Get the linked issues from the PR body
            const issueNumbers = [];
            const body = context.payload.pull_request.body || '';
            const matches = body.match(/(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi);
            
            if (matches) {
              matches.forEach(match => {
                const num = match.match(/#(\d+)/)[1];
                issueNumbers.push(parseInt(num, 10));
              });
            }
            
            // For each linked issue, update its status
            for (const issueNumber of issueNumbers) {
              try {
                // Get the issue node ID
                const issueData = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                // Get the project item ID for this issue
                const projectItems = await github.graphql(`
                  query {
                    issue(owner: "${context.repo.owner}", name: "${context.repo.repo}", number: ${issueNumber}) {
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                          }
                        }
                      }
                    }
                  }
                `);
                
                const projectItem = projectItems.issue.projectItems.nodes.find(
                  item => item.project.id === projectId
                );
                
                if (projectItem) {
                  // Update the status to "Done"
                  await github.graphql(`
                    mutation {
                      updateProjectV2ItemFieldValue(
                        input: {
                          projectId: "${projectId}",
                          itemId: "${projectItem.id}",
                          fieldId: "${statusFieldId}",
                          value: { 
                            singleSelectOptionId: "${doneOptionId}"
                          }
                        }
                      ) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `);
                  
                  console.log(`Updated issue #${issueNumber} status to Done`);
                }
              } catch (error) {
                console.error(`Error updating issue #${issueNumber}: ${error}`);
              }
            }
